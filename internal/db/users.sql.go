// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_name)
VALUES ($1)
RETURNING id, created_at, updated_at, user_name
`

func (q *Queries) CreateUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_name = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userName string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userName)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, user_name FROM users WHERE user_name = $1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
	)
	return i, err
}
